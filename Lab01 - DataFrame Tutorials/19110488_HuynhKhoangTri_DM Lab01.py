# -*- coding: utf-8 -*-
"""19110488_HuynhKhoangTri_DM Lab01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1POSrIrtn783uAxQPg8yv8_ugE5iaVe1_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, Image
import warnings

data = pd.read_csv("Telco Customer Churn.csv")

print("Display all first of 5 rows :")
display(data.head())
print("The shape of data in (nrows,ncols)")
print(data.shape)

print("How to extract Index of Dataframe ? \n\t", data.index)
print("\nHow to extract Column of Dataframe in the list type ? \n\t", list(data.columns))
print("\nHow many Gender are there in the data ? \n\t", data["gender"].unique())
print(f"\nWhat is min max value of Tenure in the data ? \n\t  \
      from min : {np.min(data['tenure'])} to max : {np.max(data['tenure'])}")
print(f"\nWhat is mean std value of Monthly Charges in the data ? \n\t  \
      mean : {data['MonthlyCharges'].mean()} std : {data['MonthlyCharges'].std()}")
print(f"\nWhat is sum and median value of Monthly Charges in the data ? \n\t  \
      sum : {data['MonthlyCharges'].sum()} median : {data['MonthlyCharges'].median()}")

print("How many cases of Churn ?")
print(data["Churn"].value_counts())
print("\n")

print("Can we see the statistics table of the whole data ?")
display(data.describe())
print("\n")

print("Is there any missing value at all columns ?")
display(data.isnull().sum())
print("\n")

print("How many Payment Method are there in the table ?")
print(len(data["PaymentMethod"].unique()))
print("\n")
print("How we can get only the rows from index 10 to 15 ?")
display(data.loc[10:15, :])
print("\n")
print("How we can reset index of the above results in a new table ? ")
df = data.loc[10:15, :]
df = df.reset_index(drop = True)
display(df)
print("\n")

print("How we can get the rows from index 10 to 15 of columns customerID, Contract, Monthly Charges and Churn ?")
display(data.loc[10:15, ["customerID", "Contract", "MonthlyCharges", "Churn"]])
print("\n")
print("How we can get only the rows from index 10 of columns customerID, Contract, Monthly Charges and Churn ?")
display(data.loc[10, ["customerID", "Contract", "MonthlyCharges", "Churn"]])

print("How we can see the type of all columns in data ?")
display(data.info())
print("\n")

print("How we can change Tenure from int64 to object")
print("Original Type of tenure :", data["tenure"].dtypes)
data["tenure"] = data["tenure"].astype(str)
print("New Type of tenure :", data["tenure"].dtypes)
print("\n")

print("How we can extract the categorical and numeric columns ?")
CatFeatures = [col for col in data.columns if data[col].dtypes in ["object", "bool"]]
NumFeatures = [col for col in data.columns if data[col].dtypes in ["int64", "float64"]]
print("Categorical Features :", CatFeatures)
print("Numeric Features :", NumFeatures)
print("\n")

print("How we can show the all statistics of Numeric Features ?")
display(data.describe())
print("\n")

print("How we can show the all statistics of Categorical Features ?")
display(data[CatFeatures].describe(include='all'))
print("\n")

print("How we can get data from describe table ?")
NumStats = data[NumFeatures].describe(include='all')
CatStats = data[CatFeatures].describe(include='all')
MonthlyCharges_50 = NumStats.loc["50%", "MonthlyCharges"]
Churn_top_freq = CatStats.loc[["top", "freq"], "Churn"]
print("MonthlyCharges at 50 %(median) : \n", MonthlyCharges_50)
print("Top and Frequency of Top in Churn : \n", Churn_top_freq)

print("How we can draw chart for a numeric features ?")
feature = "MonthlyCharges"
f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw={"height_ratios": (.15, .85)})
f.set_figheight(3)
f.set_figwidth(15)
sns.boxplot(data[feature], ax=ax_box)
sns.histplot(data=data, x=feature, ax=ax_hist)
plt.grid()
plt.show()

print("How we can map Yes/No to True/False in Churn feature  ?")
MapDict = {"Yes" : True, "No" : False}
data["Churn_Or_Not"] = data["Churn"].map(MapDict)
display(data.head())

print("How we can draw chart for a numeric feature according to a categorical feature ?")
feature = "MonthlyCharges"
plt.figure(figsize = (15,3))
sns.boxplot(y ='Churn', x = feature, data = data)
plt.title(feature)
plt.grid()
plt.show()

print("How we can draw chart for two numeric features according to a categorical feature ?")
plt.figure(figsize=(15,5))
feature_x = "MonthlyCharges"
feature_y = "tenure"
feature_hue = "Churn"
sns.scatterplot(x = feature_x, y= feature_y, hue=feature_hue, data = data, legend='full')
plt.grid()
plt.show()

print("How we can draw chart for a categorical feature ?")
feature = "Churn"
plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
data[feature].value_counts().plot.pie(autopct='%1.1f%%')
plt.subplot(1,2,2)
sns.countplot(data[feature])
plt.show()

print("How we can draw chart for a categorical feature according to another categorical feature ?")
plt.figure(figsize=(15,5))
feature_x = "Partner"
feature_y = "tenure"
sns.stripplot(data[feature_x],data[feature_y])
plt.show()

print("How we can split data into many data ? ")
feature_Geo = ['gender', 'Partner']
data_Geo = data[feature_Geo].copy()
display(data_Geo.head())

feature_Reg = ['Contract', 'PaymentMethod', 'MonthlyCharges']
data_Reg = data[feature_Reg].copy()
display(data_Reg.head())

feature_Geo = list(set(data.columns) - set(feature_Geo) - set(feature_Reg)) + ["Churn"]
data_Trans = data[feature_Geo].copy()
display(data_Trans.head())

print("How we can merge two data into one by cols ? ")
data_Geo_Reg = pd.concat([data_Geo, data_Reg], axis = 1)
display(data_Geo_Reg.head())

print("How we can filter data by condition ?")
Condition1 = data["MonthlyCharges"] > data['MonthlyCharges'].mean()
Condition2 = data["Dependents"] == "Yes"
data_over100_IntlPlan1 = data[Condition1 & Condition2].copy()
display(data_over100_IntlPlan1.head())
print(data_over100_IntlPlan1.shape)

value1, value2 = 1 , "Yes"
data_less120_IntlPlan2 = data.query("`SeniorCitizen` < @value1 and `Partner` == @value2")
display(data_less120_IntlPlan2.head())
print(data_less120_IntlPlan2.shape)

print("How we can merge two data into one by rows ?")
data_merge = pd.concat([data_over100_IntlPlan1, data_less120_IntlPlan2])
display(data_merge.head())
print(data_merge.shape)

print("How we can group by Contract and count on PaperlessBilling, sum on Tenure and Average on Monthly Charges?")
ContractDF = pd.DataFrame()
series = data.groupby("Contract")["PaperlessBilling"].count()
ContractDF.index  = series.index
ContractDF["Count on PaperlessBilling"] = series
ContractDF["Sum on tenure"] = data.groupby("Contract")["tenure"].sum()
ContractDF["Average on MonthlyCharges"] = data.groupby("Contract")["MonthlyCharges"].mean()
display(ContractDF.head())

print("How we can join data with ContractDF on the Contract information to create new information about Contract")
ContractDF["Contract"] = ContractDF.index
ContractDF = ContractDF.reset_index(drop = True)
display(ContractDF.head())
data = pd.merge(data, ContractDF, left_on='Contract', right_on='Contract')
display(data.head())